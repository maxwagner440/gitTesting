GIT NOTES


1. Branching:

-git checkout -b [your feature name]
	-this will create a branch off of your master. It will also point your repo towards that 
	branch now

-git checkout master
	-this will point your repo back towards master branch head
	
	
-git push origin [your feature name] : pushes your local changes to this specific braches. must git add & git commit prior
	
Make sure both branches are up to date with changes. If not, this will cause merge conflicts.
May have to do this manually for now. Maybe another strategy that we can discuss.



	
MERGING:

git diff --name-status [branch to compare to]..[your branch] : tells you differences between two branches
branch to compare = master
your branch = [branch name]

git fetch: fetches what other changes happened on other branches
git branch -va : lets you know descrepencies between branches

git checkout master
git pull origin master

(if this works with no errors)
perform merge (make sure you are on master branch. git checkout master should have done that)
git merge [branch name]

ISSUES WITH MERGING:

1. If there are merge conflicts such as the same file has different stuff in it, we need to abort merge and changes
files so they match.

git merge --abort : Stops the current merge

	
DELETE BRANCH:
(Must merge first if you want to keep the changes)
-git branch -d featuer_test_1 : deletes branch from your repo (can still exist on git)
-git branch -D featuer_test_1 : Forces delete with "D" vs "d"

git push origin --delete [branch name] : deletes branch (ON GIT) after merge occurs





REFERENCES: https://www.git-tower.com/learn/git/faq/git-merge-branch
https://www.git-tower.com/learn/git/ebook/en/command-line/advanced-topics/merge-conflicts